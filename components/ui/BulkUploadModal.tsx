"use client";

import { Modal, Upload, Button, message, Spin } from "antd";
import { UploadOutlined } from "@ant-design/icons";
import api from "@/lib/api";
import * as XLSX from "xlsx";
import { useState } from "react";

export default function BulkUploadModal({
  projectId,
  onClose,
}: {
  projectId: string;
  onClose: () => void;
}) {
  const [loading, setLoading] = useState(false);
  const [file, setFile] = useState<File | null>(null);

  const handleUpload = async () => {
    if (!file) {
      message.warning("Please upload an Excel file");
      return;
    }

    setLoading(true);
    try {
      const arrayBuffer = await file.arrayBuffer();
      const workbook = XLSX.read(arrayBuffer, { type: "array" });
      const sheet = workbook.Sheets[workbook.SheetNames[0]];
      const rows = XLSX.utils.sheet_to_json(sheet);

      if (!rows.length) throw new Error("Empty Excel file");

      for (const row of rows) {
        // Extract common fields
        let { name, address, latitude, longitude, ...extra_fields } = row;

        // ‚úÖ Ensure latitude & longitude are always strings
        if (latitude !== undefined && latitude !== null) {
          latitude = String(latitude).trim();
        }
        if (longitude !== undefined && longitude !== null) {
          longitude = String(longitude).trim();
        }

        // ‚úÖ (Optional) Handle missing or invalid coordinates gracefully
        if (latitude === "undefined" || latitude === "null") latitude = "";
        if (longitude === "undefined" || longitude === "null") longitude = "";

        const payload = {
          data: {
            name: name ? String(name).trim() : "",
            address: address ? String(address).trim() : "",
            latitude,
            longitude,
            extra_fields,
            project: {
              connect: [{ documentId: projectId }],
            },
          },
        };

        await api.post("/site1s", payload);
      }

      message.success("‚úÖ Sites uploaded successfully!");
      onClose();
    } catch (err: any) {
      console.error("‚ùå Upload failed:", err);
      message.error(
        `Upload failed: ${err.response?.data?.error?.message || err.message}`
      );
    } finally {
      setLoading(false);
    }
  };

  return (
    <Modal
      open
      title="‚¨Ü Bulk Upload Sites"
      onCancel={onClose}
      footer={null}
      centered
    >
      {loading ? (
        <div className="flex justify-center py-6">
          <Spin size="large" />
        </div>
      ) : (
        <div className="space-y-3">
          <p className="text-gray-600">
            Upload the Excel file generated by ‚ÄúDownload Template‚Äù.
          </p>

          <Upload
            beforeUpload={(file) => {
              setFile(file);
              return false;
            }}
            accept=".xlsx,.xls"
            maxCount={1}
          >
            <Button icon={<UploadOutlined />}>Select Excel File</Button>
          </Upload>

          {file && <p className="text-sm text-gray-500 mt-2">üìÑ {file.name}</p>}

          <div className="flex justify-end gap-2 mt-4">
            <Button onClick={onClose}>Cancel</Button>
            <Button
              type="primary"
              className="bg-green-600"
              onClick={handleUpload}
              disabled={!file}
            >
              Upload
            </Button>
          </div>
        </div>
      )}
    </Modal>
  );
}
